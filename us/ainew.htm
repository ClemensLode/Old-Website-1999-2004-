<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
   <meta name="Author" content="Clemens Lode">
   <meta name="keywords" content="books,java,linux,starcraft,warcraft,calculator,education,science projects,hill climbing,neural network,artificial life,artificial intelligence,optimization,tool,tools,learn,strategy,build order,tutorial">
   <title>Artificial Intelligence and Optimization Tutorial</title>
<link rel="stylesheet" type="text/css" href="../includes/claw.css">
<script language="JavaScript" src="../includes/menu.js" type="text/javascript"></script>
</head>
<body>
<table BORDER=0 CELLPADDING=2 WIDTH="100%" >
<tr>
<td ALIGN=LEFT VALIGN=TOP WIDTH=165>
<IFRAME WIDTH=165 HEIGHT=800 SCROLLING=NO FRAMEBORDER=0 SRC="../includes/menu.htm">
</IFRAME>
</td>
<td ALIGN=LEFT VALIGN=TOP><font face="Arial,Helvetica"><font size=+3>Artificial Intelligence</font>
<br><img SRC="../images/line.gif" height=10 width=504 ALT="Line">
<BR>
<img SRC="../images/hint.gif" ALT="Hint"> (To some key words there is additional help, move your pointer on them to get enlightened :-))<BR>
<BR>


<font size=+2><B>AI Part I<BR></B></font>
<BR>
<font face="Times New Roman">
<div id="search" class="tooltip">
<B>Search Space<img src="../images/exclamation.gif" ALT="!"></B><BR>
<BR>	
You are standing on a large field and throw a ball in a random direction.
The position of the ball is the solution, the field is the search space.
<BR>
<BR>
PS: You will find here a chapter solely about search space soon.<BR> 
</font>
</div>

<div id="buildo" class="tooltip">
<B>Build Orders<img src="../images/exclamation.gif" ALT="!"></B><BR>
<BR>
A Build Order is a list of buildings and units you will build at a certain time.<BR>Here is much room to optimize as in most cases you have to synchronize your different units to reach a certain goal. It is wasted time if your workers have to wait for new materials while its wasted cargo space if your materials are not used immediately by a worker at a building site.<BR>
</div>

<B>A little calculation concerning <a onMouseOver="showInfo('buildo');" onMouseOut="hideInfo('buildo');"><i>Build Orders</i></a> and their <a onMouseOver="showInfo('search');" onMouseOut="hideInfo('search');"><i>search space</i></a>:</B>
<BR>
<BR>
<div id="computers" class="tooltip">
<B>Computers</B><BR>
<BR>
"Have you people ever seen computers before? What they do here they press the letters and that manipulates the screen here and then we have fun with it."<BR>
<i>Nick Burns</i>
</div>
<div id="brute" class="tooltip">
<B>Brute Force method</B><BR>
<BR>
With a brute force method you just test every single item of the search space whether it is the solution or not.<BR>
As the name says you need some computer power but your brain may take a vacation :-)<BR>
</div>
<a onMouseOver="showInfo('computers');" onMouseOut="hideInfo('computers');"><i>Computers</i></a> are stupid. Let's think of the simplest way to create a perfect build order by using a <a onMouseOver="showInfo('brute');" onMouseOut="hideInfo('brute');"><i>brute force method</i></a>:x
:<BR>
First some analysis of the problem:<BR>
There are about 60 items (units/buildings/upgrades) to build in Starcraft per race.<BR>
There are no turns as the game is real-time. But it seems enough when the computer looks every second what to do because there is not much change during that second. This would be a total stupid abstraction of the problem in a 3D Shooter of course :-)<BR>
<div id="wall-in" class="tooltip">
<B>Wall-in</B><BR>
<BR>
A building in Starcraft has 4 qualities: it can produce units, needs money to build, can withstand a certain amount of damage and ... needs space.
While it is clear that you use the first three qualities in a game, using the last is a trick called 'wall-in'.<BR>
You close certain entries with neutral buildings and use this new terrain 'feature' as your advantage. (e.g. closing your entrance to hinder enemy melee units to enter your base while your own tanks are taking action)<BR>
</div>
You are without contact of your enemy in the best case for say (very) roughly 10 minutes (on an air map, or you could try to build a <a onMouseOver="showInfo('wall-in');" onMouseOut="hideInfo('wall-in');"><i>wall-in</i></a>, use your workers as defense, call your enemy a rushing idiot etc. <img src="../images/grnwink.gif" ALT="wink">).<BR>
<BR>
All in all, you have to choose between 60 possibilities in each of the 600 seconds.<BR>
That results in 60^600 = (roughly <img src="../images/grntongue.gif" ALT="Tongue">) 100^500 = a ten with 1000 x "0"s different build orders.<BR>
Ok, phew... What magic tricks will this guy show us now?<BR>
<BR>
First some implementation stuff. How long would a computer need to calculate that?<BR>
<div id="tick" class="tooltip">
<B>A tick<img src="../images/exclamation.gif" ALT="!"></B><BR>
<BR>
Tick? What's that?<BR>
Well actually it's a "processor cycle" but that's just another word...<BR>
One 'tick' is one calculation in the CPU, like "add one" or "set to zero". There are also some more powerful orders a CPU can execute, like writing to or reading from the RAM, doing multiplication etc. Those operations often need some more 'ticks' to execute.<BR>
The exact number depends on the processor architecture (i386, i486, i586 in case of an Intel Machine), while the number of 'ticks' a CPU can execute per second is the Hz (like 2 GigaHz).
<BR>
</div>

Let's say we could optimize the program so that it only need one <a onMouseOver="showInfo('tick');" onMouseOut="hideInfo('tick');"><i>tick</i></a> we can calculate the time of each build order in one tick.<BR> 
(well I would say about 10000 ticks per build order, but that really does not matter <img src="../images/grntongue.gif" ALT="Tongue">) <BR>
<div id="someyears" class="tooltip">
<font size=-3>
10000000000000000000000000000000000
00000000000000000000000000000000000
00000000000000000000000000000000000
00000000000000000000000000000000000
00000000000000000000000000000000000
00000000000000000000000000000000000
00000000000000000000000000000000000
00000000000000000000000000000000000
00000000000000000000000000000000000
00000000000000000000000000000000000
00000000000000000000000000000000000
00000000000000000000000000000000000
00000000000000000000000000000000000
00000000000000000000000000000000000
00000000000000000000000000000000000
00000000000000000000000000000000000
00000000000000000000000000000000000
00000000000000000000000000000000000
00000000000000000000000000000000000
00000000000000000000000000000000000
00000000000000000000000000000000000
00000000000000000000000000000000000
00000000000000000000000000000000000
00000000000000000000000000000000000
00000000000000000000000000000000000
00000000000000000000000000000000000
00000000000000000000000000000000000
0000000000000000000000000000 YEARS. <BR></font>Drop or add some zeros :)
</div>
A modern computer is able to calculate about 2 GhZ = 2.000.000.000 ticks/second...<BR>
Well not fast enough <img src="../images/grngrin.gif" ALT="Grin"><BR>
That would <a onMouseOver="showInfo('someyears');" onMouseOut="hideInfo('someyears');"><i>some</i></a> years to calculate <img src="../images/grnwink.gif" ALT="wink"><BR>
Waiting for a faster computer chip instead of letting the simulation run would even save some time in this case (remember, the speed of CPUs double every two years).<BR>
Ok, ok, the search space (the "60^600") is too big.<BR>
<BR>
<img src="../images/DrLight.gif" ALT="DrLight">Let's try to analyze the problem:<BR>   
<BR>
- The computer should not try to 'optimize' the build order with useless items like Battle Cruisers if you want the fastest way to build medics or space marines.<BR>
In normal (10 minute-) games there are not more than 10 different units (remember in this case a unit could also be an upgrade or something) in the build order. 
<BR><BR>
10^600 remaining ...
<BR>
- Checking whether the computer should build another unit is probably only useful when something significant changes in the game. For example your workers brought another 50 minerals in, your production site or your upgrade is completed. Consequently the computer will not try to build every second a new unit but wait until the prerequisites are fulfilled.<BR>
<BR>
10^50 remaining ...
<BR> 
Looks much better now than the 1000 "0"s we got before but the search space is still too big... (remember, 9 Zeros does a GhZ processor!)<BR>
<BR>
At this point we can neither easily reduce the steps any further nor the possibilites per step...<BR>
<BR>
Well... How does that Starcraft Calculator function???<BR>
<BR>
Yes, it has an internet connection to me and I am typing the build orders <img src="../images/ugly.gif" ALT="ugly"><BR>
<div id="preprog" class="tooltip">
<B>Preprogrammed computer intelligence</B><BR>
<BR>
Oooh... Computers are stupid. And with preprogrammed computer intelligence you will realize that pretty fast :)<BR>
Well... imagine that you have to make a plan for every minute of a whole day (or week or whatever). You see the point? Everything can happen. The only reason why a computer still "seems" to be intelligent is that these programs often work in very specialized areas and are incapable to do other things.<BR>
An automat where you can buy drinks is preprogrammed...<BR>
</div>    
 
<a onMouseOver="showInfo('preprog');" onMouseOut="hideInfo('preprog');"><i>Preprogrammed</i></a> build orders?<BR>
No, that would need a very huge database... <BR>
<img src="../images/idea.gif" ALT="idea"> 
Genetic Algorithms is the answer.<BR>
Well, I'll talk about that in "AI Part II" :)<BR>
<BR>
<BR>



<font size=+2><B>AI Part II<BR></B></font>
<BR>
<IMG SRC="../images/line.gif" HEIGHT=10 WIDTH=504 ALT="line">
<div id="genetic" class="tooltip">
<B>Genetics</B><BR>
<BR>
Every lifeform on earth has a special code in each cell. It's like a computer program but each part of the program is heavily connected to the others. Imagine it like a huge parallel computer with many interconnections between the programs/towers.
<BR>     
</div> 
<div id="fitness" class="tooltip">
<B>Fitness</B><BR>
<BR>
The "fitness" of a program is a measurement how well a computer program satisfy a certain problem..
</div>
<a onMouseOver="showInfo('genetic')';" onMouseOut="hideInfo('genetic');"><i>Genetic</i></a> Algorithms? Hu? Do you create bacteria and viruses in a dark lab beneath the surface?<img src="../images/DrCossack.gif" ALT="DrCossack"><BR>


The first version used these genetic algorithms.<BR>
At first a small overview:<BR>
<img src="../images/DrLight.gif" ALT="DrLight">
The program creates say 100 randomized build orders. After that it calculates the <a onMouseOver="showInfo('fitness');" onMouseOut="hifeInfo('fitness');"><i>fitness</i></a> depending on the goals I set up. A 'goal' is in this case for example "Build 10 SpaceMarines and upgrade their weapons and do that as fast as possible".<BR>
Afterwards the worst BOs are 'selected' and deleted while the best ones may ... well 'digitally copulate' with others to merge their genetic information, i.e. their build order.<BR>
<div id="mutation" class="tooltip">
<B>Mutations</B>
<BR><BR>
A mutation is a small change in the genetic code. In genetic algorithms it is used to keep up a certain level of diversity between the different programs.<BR>
The affected parts where the mutation take place could be just changed, replace, cut out or new (random) parts are created.<BR>  
</div>
<div id="gen-pool" class="tooltip">
<B>Gen-pool</B>
<BR><BR>
A gen-pool is the sum of all genes in a population. The more diversity there is the better can the population adapt to changing environment.<BR>
</div>  
    
All in all, over time, the best build order will spread throughout the whole <a onMouseOver="showInfo('gen-pool');" onMouseOut="hideInfo('gen-pool');"><i>gen-pool</a></i> until everyone got the 'good' genes. Due <a onMouseOver="showInfo('mutation');" onMouseOut="hideInfo('mutation');"><i>mutations</i></a> the build orders always change a bit. Either they die out (the mutation was lethal) or that change in their genetic code improves their fitness. Again their (now better) genetic information spread through the gen-pool etc. etc.<BR>
<BR>
Phew... well that was much... that covers about one year biology in school... <img src="../images/leseratte.gif" ALT="Book">
<BR>
If you are not quite familiar with all these things I suggest to get you a good book about biology. "Well" you might say "I don't like those school books...".
Then take a look at the <a href="books.htm">'books'</a> section. (Except one or two) there are no 'one-fact-after-the-other' books only good readable ones that are fun to read if you are interested in biology.<BR>
Believe me. It's worth the time.<BR>       
<BR>
Oook.... back to work <img src="../images/wave.gif" ALT="wave">
<BR> 
<BR>
Such an algorithm has of course some problems.<BR>
- While it is clear when a 'brute-force' algorithm is completely executed you don't know when a genetic algorithm is ready i.e. you found the best solution.
- That merging is problematic in the case of build orders as with crossing over the evolution tends to connect important parts of the build order together.<BR>
Hu?<BR>
Well, take a cord and cut it at random spots. You probably notice that the longer the distance between to points on that cord is the more probable they are cut in two different pieces... Consequently build orders where two important 'orders' are together at one place have a higher probability to give BOTH 'orders' together on one string to their  descendants.<BR>
<BR>
 
Ok, the next step I took, was to fine tune everything, added additional mutation factors etc. but to make it short:
The ability of the program to create build orders was really weak.<BR>
Yeah, I remember how happy I was when it completed the goal to build 1 additional worker <img src="../images/grngrin.gif" ALT="grin">.<BR>
Well, at that point I started to really hate the program, I wanted to give up.<BR>
But hey, I bought a book (actually 2 years ago, I just rediscovered it on my desk <img src="../images/grnwink.gif" ALT="wink">).<BR>
It is kind of a weird book about applying Artificial Neural Networks (ANNs) in industry applications...<BR>
It concentrates more on the project management than on the technical details...<BR>
Only some poor examples were put in there. All in all, the authors really want me to study computer science before they surprise me with their secret voodoo magic.<BR>
Back to the roots:<BR>
I did not really understand how ANNs learn at first place.<BR>
I could not imagine how a computer program can learn from some examples.<BR>   
<BR>
But let's examine first the difficulty of the task to make good (i.e. it fulfills the goals in a small amount of time) build orders.<BR>  
It is NOT easy.<BR>
If you just watch yourself in a game, you often have 2-3 basic rules in mind like "Always build workers", "Get some units at the beginning", "Make an <a onMouseOver="showInfo('expansion');" onMouseOut="hideInfo('expansion');"><i>expansion</i></a> if you have enough minerals and units", etc. etc.<BR>
But these are no build orders, these are just rules.<BR>
To make it clear: Build Orders are 'Information' while rules are 'Knowledge'.<BR>
You will not win a single game with build orders alone, you need knowledge to fine tune them and apply them on different maps etc.<BR>
<BR>
So... how does 'learning' functions in general?<BR>
<img src="../images/DrLight.gif" ALT="DrLight">
You get something like a reward if one of your rules is working. You destroy some enemy units, you control certain parts of the map or you even win the game.<BR>
As we were newbies we all built not many workers. We used some kind of logic: "Workers cost money" and "I want more money", so we tried not to build too many of them.<BR>
<div id="zealots" class="tooltip">
<B>Zealot</B>
<BR><BR>
A zealot is the basic fighting unit of the mighty Protoss.<BR>
</div>
But trying someone else's strategy to always build workers we suddenly recognized that we have more <a onMouseOver="showInfo('zealot');" onMouseOut="hideInfo('zealot');"><i>Zealots</a></i> standing around than before! In addition, when we make an expansion, we can transfer some workers to the new base and can immediately start harvesting.<BR>
<img src="../images/hint.gif" ALT="hint"> "Always build workers" is a good rule!<BR>
But back to the problem:<BR>
Let's assume you learn only build orders. You play them step for step and... loose :|<BR>
But what do we learn from this defeat? Not much. You can probably only notice that your build order is bad.<BR>
We can't optimize the build order, since we only know that it just did not function. We don't know exactly what part of the build order is wrong.<BR>
So, all in all, the ANN approach was doomed to failure from the beginning...<BR>
<BR>
Mmmh... this is the end of chapter II and there are many open questions... <BR>
Especially about that ANN thing, the 'evolution' concept and some more about Genetic programming.<BR>
I am also planning to open the source of the old starcraft calculator and write a documentation.<BR> 
Well... Part III is already in development, so be patient <img src="../images/wave.gif" ALT="wave">
<BR>
<BR>
<BR>
Here it comes :)
<BR>
<B> AI Part III - (Artificial) Neural Networks </B>
<BR>
<IMG SRC="../images/line.gif" HEIGHT=10 WIDTH=504 ALT="line"> 
<BR>
Roughly said: A Neural Network is the thing you call 'brain'.<BR>
It consists of input cells/cell groups like the eye, the ear or the nose and output cells/cell groups like most muscle cells. In addition there are 'hidden units', the cells which connect input and output units.  
<BR>
To this point it is just like a camera or a computer.<BR>
<BR>
So why is a computer or a camera (without special programming) not able to think like a human brain? In other words:  What is special about this kind of Neural Networks?
<BR><BR>
The special thing about a Neural Network is, that its structure provides a certain ability: It is able to learn.
<BR><BR>
That is something a computer is not able to do (except you are simulating a neural network on the computer :P).  
<BR><BR>
The rule behind that 'learning' is surprisingly simple:<BR>
If there is a difference between the output of the neural network and the preferred output in that situation (for example: the right decision), then modify the connections between the (hidden) units to get the preferred output next time.
<BR><BR>
An example will make it clear:<BR>
User: 3+3 = ?<BR>
Computer: 7<BR>
User: Wrong. The correct answer is 6.<BR>
User: 3+3 = ?<BR>
Computer: 6<BR>
<BR>
MMmh... that looks like that the NN just saves the result in a database and recalls it when needed...
<BR><BR>
Well... you are right, the NN is some kind of database.
But that database has the ability to generalize the problem and is able to solve problems that it never exercised!
<BR><BR>
It is probably hard to believe... That is the reason why we make our own Artificial Neural Network now :)
<BR><BR>
All you need is a pen, paper and a brain :-)
<BR><BR>
<B>Today's task</B>: The NN shall learn to add binary numbers.
<BR><BR>
For those who are not very familiar with binary:<BR>
10 + 01 = 11<BR>
01 + 01 = 10<BR>
11 + 01 = 00<BR>
11 + 10 = 01<BR>
<BR>
Ok, so we need 4 Input units, 2 Output units and a number of hidden units.<BR>
Let us take 2 Hidden units in this case.<BR>
<BR>
AB + CD    		=               EF <BR>
||   ||				        ^^<BR>		
||   |\->[ I1 ] \ 		        || <BR>
||   \-->[ I2 ] - X [ H1 ] X [ O1 ] ----/|<BR>
|\------>[ I3 ] - X [ H2 ] X [ O2 ] -----/<BR>
\------->[ I4 ] /<BR>
<BR>
Explanation:
<BR><BR>
A unit has the output "-1" when the sum of all incoming nodes is <0, 0 when the sum is 0 and it has the output "1" when the sum is >0.<BR>
There is only one incoming node to I1 to I4, consequently I4 = A, I3 = B, I2 = C, I1 = A. The same thing applies to E and F: E = [O1], F = [02].
The "X" means that all previous Nodes are connected and multiplied by a scalar. This results in:<BR>
If ([I1]*a1+[I2]*a2+[I3]*a3+[I4]*a4>0) then H1=1 else if (...<0) H1=-1 else H1=0<BR>
and<BR>
If ([I1]*b1+[I2]*b2+[I3]*b3+[I4]*b4>0) then H2=1 else H2=0<BR>
<BR>
and again the same thing for O1/O2:<BR>
<BR>
If ([H1]*c1+[H2]*c2>0) then O1=1 else O1=0<BR>
and<BR>
If ([H1]*d1+[H2]*d2>0) then O2=1 else O2=0<BR>
<BR>~~~~~
You might notive that the scalar variables a1, a2, ..., c1, c2, ..., d2 have a significant effect on the result and therefor defining the neural network.
:x
<BR><BR>
This network now can learn any mathematical operation with two bits.   
<BR><BR>
Now we only have to initialize the neural network with random values and give it some test cases.
<BR><BR>
a1=-1   a2=-0.5 a3= 0.5 a4=-1<BR>
b1=-1   b2=-1   b3= 1   b4=-0.5<BR>
c1= 0.5 c2=-1<BR>
d1= 1   d2= 1<BR>
<BR>
<BR>
Test Case 1: 01 + 10 (= 11)<BR>
=> I1=0, I2=1, I3=1, I4=0<BR>
=> H1=((-1 * 0) + (-0.5 * 1) + (0.5 * 1) + (-1 * 0)) = 0
=> H2=((






=> H1=((-1 * 0) + (-0.5 * 1) + (0.5*1) + (-1 * 0)) > 0 = (-0.5 + 0.5) > 0 = 0<BR>
   H2=((-1 * 0) + (-1 * 1) + (1* 1) + (-0.5*0) > 0) = (-1 + 1) > 0 = 0<BR>
=> O1 = (0.5 * 0) + (-1 * 0) > 0 = 0<BR>
   02 = (1 * 0) + (1 * 0) > 0 = 0 <BR>
<BR>
Wrong.<BR>
But that is what we expected, the NN is still unexperienced.<BR>
<BR>
Now we have to use our rule.<BR>
This might look a bit confusing as there are now several ways of changing the NN to get a "11" instead of "00" as the result.
There are several algorithms but we want to use now just our brain.
<BR>
01 gets > 0 when (I)   ((H1=1) and (H2=0)) and/or <BR>
                 (II)  ((H1=0) and (H2=1) and we change the c2 to 0.5) and/or<BR>
		 (III) ((H1=1) and (H2=1) and we change the c2 to 0.5) and/or<BR>
		 (IV)  ((H1=1) and (H2=1) and (c1=1) and (c2=-0.5))	 <BR>
                  <BR>
O2 gets > 0 when (V)  ((H1=1) and/or (H2=1)) and/or<BR>
                 (VI) (O1=1)     (because O1 => (H1=1) or (H2=1))<BR>
<BR>
The best decision here is probably to take the path with the smallest number of changes in the network as any change will affect other calculations, too.<BR>
So let us try (II) and (VI).<BR>
=> new c2 = 0.5<BR>
=> H2=1<BR>
<BR>
H2 = 1?<BR>
But H2 was 0!<BR>
So this is again wrong.<BR>
Well, so we have to do the next step: Changing the network in a way so that we get H2=1 with the Input of our test case 1.
<BR>
Let us look back to the calculation:<BR>

<i>H2=((-1 * 0) + (-1 * 1) + (1* 1) + (-0.5*0) > 0) = (-1 + 1) > 0 = 0</i><BR>
<BR>
We cannot change the Inputs I1=0 and I4=0 so we concentrate on the scalars b2 and b3. 
<BR><BR>
H2 becomes > 0 if (I)   (b2=-0.5)		and/or <BR>
		  (II)  (b2=0.5)		and/or <BR>
                  (III) (b2=1) 			and/or<BR>
		  (IV)  ((b2=0.5) and (b3=0.5)) and/or<BR>
		  (V)	((b2=1) and (b3=0.5))	and/or<BR>
		  (VI)  ((b2=1) and (b3=-0.5))	and/or<BR>
		<BR>
So there are many possible changes.<BR>
As above we take the smallest modification (I):<BR>
new b2=-0.5<BR>
<BR>
Finally we got our Neural Network that is able to add 01 and 10 successfully :-)<BR>
<BR>
a1=-1   a2=-0.5 a3= 0.5 a4=-1<BR>
b1=-1   <B>b2=-0.5</B>   b3= 1   b4=-0.5<BR>
c1= 0.5 <B>c2=0.5</B><BR>
d1= 1   d2= 1<BR>
<BR>
I will go over the next steps only briefly:<BR>
Test case Nr. 2: 11 + 11 = 10 (remember, the overflow bit 100 is dropped here as the output is only 2 bits broad)<BR>
<BR>
=> I1=1, I2=1, I3=1, I4=1<BR>
=> H1=((-1 * 1) + (-0.5 * 1) + (0.5*1) + (-1 * 1)) > 0 = (-1-0.5-0.5-1) > 0? = 0<BR>
   H2=((-1 * 1) + (-0.5 * 1) + (1* 1) + (-0.5*1) > 0) = (-1-0.5+1-0.5) > 0? = 0<BR>
=> O1 = (0.5 * 0) + (0.5 * 0) > 0 = 0<BR>
   02 = (1 * 0) + (1 * 0) > 0 = 0 <BR>
<BR>
O1 = 0 -> wrong<BR>
O2 = 0 -> correct<BR>
<BR>
O1 becomes > 0 if (I)  (H1=1) and/or
	          (II) (H2=1)
=> (II)<BR>
<BR>
H2 becomes > 0 if (I)   (b1=0.5) and/or
		  (II)  (b2=1) and/or
		  (III) (b4=1) and/or
		  (IV)  ((b1=-0.5) and (b2=0.5))
		  (V)	((b1=-0.5) and (b4=0.5))
		  (VI)	((b2=0.5) and (b4=0.5))
		  ... (some more irrelevant possibilities)
=> (V)<BR>
Problem: O2 gets 1 then, too. -> d2 = -0.5  
<BR>
a1=-1   a2=-0.5 a3= 0.5 a4=-1<BR>
<B>b1=-0.5</B>   <i>b2=-0.5</i>   b3= 1   <B>b4=0.5</B><BR>
c1= 0.5 <i>c2=0.5</i><BR>
d1= 1   <B>d2=-0.5</B><BR>
<BR>
Test case Nr. 3: 01+01 (= 10)<BR)
=> I1=1, I2=0, I3=1, I4=0<BR>
=> H1=((-1 * 1) + (-0.5 * 0) + (0.5*1) + (-1 * 0)) > 0 = (-1 + 0.5 ) > 0 = 0<BR>
   H2=((-0.5 * 1) + (-0.5 * 0) + (1* 1) + (0.5*0) > 0) = (-0.5 + 1) > 0 = 1<BR>
=> O1 = (0.5 * 0) + (0.5 * 1) > 0 = 1<BR>
   02 = (1 * 0) + (-0.5 * 1) > 0 = 0 <BR>
<BR>
O1 = 1 -> correct<BR>
O2 = 0 -> correct<BR>
great :)<BR>
<BR>
<BR>
Test case Nr. 4: 10+01 (= 11)<BR>
Yes, we had something like that in the first example... But the NN does not know (yet) that addition is commutative...<BR>
=> I1=1, I2=0, I3=0, I4=1<BR>
=> H1=((-1 * 1) + (-0.5 * 0) + (0.5*0) + (-1 * 1)):x > 0 = (-1 -1 ) > 0 = 0<BR>
   H2=((-0.5 * 1) + (-0.5 * 0) + (1* 0) + (0.5*1) > 0) = (-0.5 + 0.5) > 0 = 0<BR>
=> O1 = 0 -> wrong
   O2 = 0 -> wrong	 
01 and 02 gets >0 if (I)   (H1>0) and/or
		     (II)  ((H2>0) and (d2=0.5))
I will take (I) as it is probably not good changing d2 back to 0.5.<BR>
H1 gets >0 if (I) (a1=0.5 and a4=0.5)
Taking (I) there is a high chance that we will modify some other results, too.<BR>
Well... let's proceed:

<B>a1=0.5</B>   a2=-0.5 a3= 0.5 <B>a4=0.5</B><BR>
<i>b1=-0.5</i>   <i>b2=-0.5</i>   b3= 1   <i>b4=0.5</i><BR>
c1= 0.5 <i>c2=0.5</i><BR>
d1= 1   <i>d2=-0.5</i><BR>

Test case Nr. 5: 00 + 10 (=10)<BR>
=> I1=0, I2=1, I3=0, I4=0<BR>
=> H1=((0.5 * 0) + (-0.5 * 1) + (0.5*0) + (0.5 * 0)) > 0 = (- 0.5 ) > 0 = 0<BR>
   H2=((-0.5 * 0) + (-0.5 * 1) + (1* 0) + (0.5*0) > 0) = (-0.5 ) > 0 = 0<BR>
=> O1 = 0 -> wrong
   O2 = 0 -> true
 
O1 gets >0 if  H2=1
=> H2 gets >0 if b2=0.5


Test case Nr. 6: 00 + 01 (=01)<BR>
H1 = 1
H2 = 0
=> O1=1, O2=1         
  	





	 



 
<BR>
<BR>

And now, it is completed. The neural network has learned to add only by giving it examples and by telling it whether its result is right or wrong.
<BR>
Of course... You will not see much generalization here as the number of possible test cases is too small.
But I think the general concept is clear now.
<BR><BR>
Feel free to add an overflow-bit output, try a 3bit neural network or add additional hidden units.
The more (input/hidden/output) units you add, the more generalization is possible.
<BR><BR>
As you might have noticed: There are a lot parallel computation. Every cell in our brain is some kind of an analog computer that adds the incoming nerve impuls to a new one.
This is applied kinda tricky:<BR>
The (electric) nerve impuls arrives at the target-nerve cell where it releases so called chemical emitter into the target-nerve cell where it is automaticly added together (wel... the emitter chemicals come together and then they are there... that's all... just like putting two apples together... There is no calculation needed, there ARE two apples as soon as you put them there :P ) <BR> 
When a certain amount of emitter chemicals in the cell are reached, it creates a new electrical impulse and so on...

<BR><BR><BR>
Well... I hope this little introduction is helpful. Just ask me when you did not understand something!<BR>
It is very hard to write about something I already know if there are no questions...
Thank you!<BR>
<BR>
<BR>
<BR>
<BR> 
<IFRAME WIDTH=800 HEIGHT=150 SCROLLING=NO FRAMEBORDER=0 SRC="../includes/rights.htm">
</IFRAME>
</td>
</tr>
</table>
</body>
</html>
